
# Staging Environment Nginx Configuration
upstream staging_backend {
    server app-staging:3000;
    keepalive 32;
}

server {
    listen 80;
# CHANGE THIS TO: Your actual domain names
    server_name staging.example.com;

    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
# CHANGE THIS TO: Your actual domain names
    server_name staging.example.com;

    # SSL Configuration
# CHANGE THIS TO: Path to your SSL certificate file
    ssl_certificate /etc/nginx/ssl/staging.example.com.crt;
# CHANGE THIS TO: Path to your SSL certificate key file
    ssl_certificate_key /etc/nginx/ssl/staging.example.com.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Include common configuration
    include /etc/nginx/conf.d/common.conf;

    # Logging
    access_log /var/log/nginx/staging_access.log;
    error_log /var/log/nginx/staging_error.log;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=staging:10m rate=10r/s;
    limit_req zone=staging burst=20 nodelay;

    # Main application
    location / {
        proxy_pass http://staging_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        
        # Staging specific headers
        add_header X-Environment "staging" always;
        add_header X-Robots-Tag "noindex, nofollow" always;
    }

    # API routes with additional security
    location /api/ {
        proxy_pass http://staging_backend;
        
        # Additional rate limiting for API
        limit_req zone=staging burst=10 nodelay;
        
        # CORS headers for staging
        add_header Access-Control-Allow-Origin "https://staging.example.com" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ \.(env|log|sql)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}
