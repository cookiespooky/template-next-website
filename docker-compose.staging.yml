
# Staging Environment Docker Compose
version: '3.8'

services:
  # PostgreSQL Database
  postgres-staging:
    image: postgres:15-alpine
    container_name: course-platform-postgres-staging
    environment:
      POSTGRES_DB: course_shop_platform_staging
      POSTGRES_USER: staging_user
      POSTGRES_PASSWORD: ${POSTGRES_STAGING_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: md5
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - course-platform-staging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user -d course_shop_platform_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis for caching
  redis-staging:
    image: redis:7-alpine
    container_name: course-platform-redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
    networks:
      - course-platform-staging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Next.js Application
  app-staging:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: course-platform-app-staging
    environment:
      - NODE_ENV=production
# CHANGE THIS TO: Your complete PostgreSQL connection string
      - DATABASE_URL=postgresql://staging_user:${POSTGRES_STAGING_PASSWORD}@postgres-staging:5432/course_shop_platform_staging
# CHANGE THIS TO: Your main website URL (with https://)
      - NEXTAUTH_URL=https://staging.example.com
# CHANGE THIS TO: A strong NextAuth secret (generate with: openssl rand -base64 64)
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
# CHANGE THIS TO: Your YooKassa Shop ID (get from: https://yookassa.ru/my/shop/integration)
      - YOOKASSA_SHOP_ID=${YOOKASSA_SHOP_ID}
# CHANGE THIS TO: Your YooKassa Secret Key (get from: https://yookassa.ru/my/shop/integration)
      - YOOKASSA_SECRET_KEY=${YOOKASSA_SECRET_KEY}
# CHANGE THIS TO: Your Redis connection URL (local: redis://localhost:6379)
      - REDIS_URL=redis://redis-staging:6379
    ports:
      - "3001:3000"
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    networks:
      - course-platform-staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Nginx Reverse Proxy
  nginx-staging:
    image: nginx:alpine
    container_name: course-platform-nginx-staging
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/common.conf:/etc/nginx/conf.d/common.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app-staging
    networks:
      - course-platform-staging
    restart: unless-stopped

volumes:
  postgres_staging_data:
  redis_staging_data:

networks:
  course-platform-staging:
    driver: bridge
